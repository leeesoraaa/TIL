-- 함수(Function): 사용자 정의 함수와 내장함수
-- SQL함수: 숫자함수, 문자함수, 날짜함수, 형변환함수, NVL...

--1. DUAL 테이블: 한 행의 결과값을 추출하기 위한 테이블, 가상의 테이블
--2. 숫자함수: 숫자 데이터를 처리하기 위한 함수
--3. 문자함수: 문자 데이터를 처리하기 위한 함수
--UPPER('문자'): 대문자로 변환하는 함수
select 'Welcome to Oracle' , upper('Welcome to Oracle') from dual;

--LOWER('문자'): 소문자로 변환하는 함수
select 'Welcome to Oracle' as "원본데이터", lower('Welcome to Oracle') "lower적용 후" from dual;

--INITCAP('문자'): 첫 글자만 대문자로 변환하는 함수
select 'welcome to oracle', initcap('welcome to oracle') from dual;

-- LENGTH('문자'): 문자 길이를 추출하는 함수
-- 문자: 숫자, 영문자, 특수문자 / 한글, 한자
select length('oracle'), length('오라클') from dual;

--LENGTHB('문자'): 문자의 바이트수를 추출하는 함수
select lengthb('oracle'), lengthb('오라클') from dual; --한글(unicode - 한 글자 당 3byte)

--INSTR('문자'): 특정 문자의 위치를 추출하는 함수
-- 'Welcome to Oracle'에서 'o'가 저장된 위치 값을 추출하는 쿼리문을 작성하시오.
select instr('Welcome to Oracle', 'O') from dual;
select instr('Welcome to Oracle', 'o') from dual;

--SUBSTR/SUBSTRB
--SUBSTR('문자', 시작위치, 글자 수): 문자열의 시작위치에서 글자 수만큼 추출하는 함수
--오라클에서 인덱스의 시작값은 1
-- 인덱스 4부터 시작해서 문자 3 개를 추출하는 쿼리문을 작성하시오.
select substr('Welcome to Oracle', 4, 3) from dual;

--Q1. 사원정보를 가지고 있는 테이블 employee에서 직원의 입사년도와 입사한 달만 추출하는 쿼리문
-- 직원 이름과 입사년도, 입사월만 추출하시오.
select * from employee;
select ename, 19 ||substr(hiredate, 1, 2) "년도", substr(hiredate, 4, 2) "달" from employee;

--Q2. 위 코드를 활용하여 9월에 입사한 직원만 추출하는 쿼리문을 기술하시오.
select ename, 19 ||substr(hiredate, 1, 2) "년도", substr(hiredate, 4, 2) "달" 
from employee
where substr(hiredate, 4, 2) = '09';

--4. 날짜함수: date형에 사용하는 함수
-- 결과값으로 날짜 또는 기간을 얻는다. 이때 기간은 주로 일단위 계산된다.
-- 날짜 + 숫자, 날짜 - 숫자, 날짜 - 날짜(기간)

--SYSDATE: 현재 시스템에 등록된 날짜를 반환하는 함수
select sysdate from dual;
--Q3. sysdate를 활용하여 어제 날짜, 오늘 날짜, 내일 날짜를 추출하는 쿼리문을 구현하시오.
select sysdate-1 "어제", sysdate "오늘", sysdate+1 내일 from dual;

--MONTHS_BETWEEN(날짜1,날짜2): 두 날짜 사이의 개월 수를 구하는 함수
--Q4. 직원들의 근무 개월수를 추출하는 쿼리문을 기술하시오.
select ename, sysdate, hiredate, floor(months_between(sysdate, hiredate)) 근무개월수
from employee;

--ADD_MONTHS: 특정 개월수를 더한 날짜를 추출하는 함수
--Q5. 직원들의 입사 4개월 후의 날자를 추출하시오.
select ename, hiredate, add_months(hiredate, 4) "입사 후 4개월" from employee;

--5. 형변환함수(숫자형, 문자형, 날짜형)
-- number <=> character(varchar2, char) / character<=> date
-- to_number(), to_char(), to_date()
--일반적으로 날짜를 문자뎅이터 형태로 변환하여 표시하는 경우가 많다.
-- YYYY/YY, MM, MON(월을 한글로 나타냄), DAY(요일을 한글로 나타냄)
select sysdate from dual;
select sysdate, to_date(sysdate, 'YYYY-MM-DD') from dual;

--Q6. 직원들의 입사일을 년도-월-일로 표시하되 뒤에 요일도 추출하시오.
select ename, to_char(hiredate, 'YYYY-MM-DD MON') 입사일 from employee;

--select 확장형: 그룹함수(Group by)와 그룹별 정렬(having)
-- 그룹함수: 하나 이상의 행을 그룹으로 묶어서 연산을 수행하고, 하나의 결과를 추출하는 함수
-- 단일행 함수: 하나의 결과만 추출하는 함수
-- 다중행 함수: 여러 개의 결과를 추출하는 함수, 별도의 함수를 사용하여 처리한다.

-- SUM(컬럼명): 해당 컬럼의 값들의 총합
--NULL은 제외하고 계산
--Q7. 직원들의 급여의 총합을 추출하되, 천단위 이하를 반올림하여 추출하시오.
select round(sum(salary),-3) from employee;

--AVG(컬럼명): 해당 컬럼 값들의 평균
--Q8. 직원 급여의 총 평균을 추출하시오.
select avg(salary) from employee;

-- MAX/ MIN
--Q9. 직원들의 급여 중 가장 높은 급여와 가장 낮은 급여를 추출하시오.
select max(salary), min(salary) from employee;

--Q10. 가장 높은 급여를 받는 직원의 이름과 급여를 추출하시오.
select ename, salary from employee
where salary = (select max(salary) from employee); -- 그룹함수는 함께 쓸 수 없어서 서브쿼리를 사용함

--COUNT: 해당 컬럼의 개수를 반환하는 함수, null값은 제외
--Q11. 직원의 수를 추출하시오
select count(*) from employee;

--Q12. 담당업무(job)의 개수를 추출하시오.
select count(distinct job) from employee;

--Q13. 부서의 개수를 추출하시오.
select count(distinct dno)from employee;

--GROUP BY절: 특정 컬럼을 기준으로 그룹화하여 계산을 수행
--그룹함수와 함께 사용함
--그룹 기준이 아닌 컬럼은 컬럼으로 추출 불가
select sum(salary)from employee;
--Q14. 부서별 직원의 급여의 총합을 추출하시오.
select sum(salary) from employee group by dno;

--Q15. 직급별 급여의 총합과 평균을 추출하되 해당 직급도 표시하시오.
select job, sum(salary), round(avg(salary), 1) from employee
group by job;

--Q16. 각 부서별 인원수와 보너스를 받는 직원의 수를 추출하시오.
select dno, count(ename), count(commission) from employee group by dno;

select * from department;

-- HAVING절: GROUP BY에 의해 생성된 결과에 조건을 담을 때 사용
-- Q17. 부서번호가 30번에 해당하는 직원들의 직급별 급여의 합을 추출하시오.
select job, sum(salary) from employee where dno=30 group by job;

--Q18. 부서별 평균급여가 2000이상인 부서의 번호와 평균급여를 추출하시오.
select dno, round(avg(salary),1)
from employee
group by dno
having avg(salary) >= 2000;

--Q19. 부서의 최대급여와 최소급여를 추출하되 최대급여가 2900이상인 부서만 추출하시오.
select dno, max(salary), min(salary)
from employee
group by dno
having max(salary) >= 2900;

-- 조인(JOIN): 하나 이상의 테이블을 묶어 마치 하나의 테이블인 것처럼 사용하는 기능
-- 데이터베이스는 하나의 테이블에 모든 데이터를 담지 않고 여러 테이블로 나누어 분산처리함
--이때 각 테이블끼리 특정 규칙이나 관계가 있도록 설계된다
-- 여러 테이블에 흩어져 있는 데이터를 사용자가 원하는 데이터를 모두 찾아 추출하기 위해 여러 테이블을 조회해야 한다. 그래서 등장 기능이 join

--Q20. scott의 부서명을 추출하시오.
select dno from employee where ename = 'SCOTT';
select dname from department where dno = 20

-- 조인의 종류: CARTESIAN PRODUCT(카디션 곱), EQUI JOIN, NON-EQUI JOIN, SELF JOIN, OUTER JOIN
-- CARTESIAN PRODUCT(카디션 곱): 서로 다른 두 개의 테이블을 연결할 때 특정 컬럼에 의해 조인되지 않고 모든 데이터를 결과로 나타내는 경우
-- 결과: 컬럼 수는 더해지고, 행의 수는 곱해진 결과를 추출한다.
select * from employee; -- 직원정보(행의 수14, 컬럼 수8)
select * from department; -- 부서정보(행의 수 4, 컬럼 수 3)

select * from employee, department; --하나 이상의 테이블 명을 씀 > join

--EQUI-JOIN: 연결할 두 데이터에 공통적으로 존재하는 컬럼의 값이 일치하는 행만 연결하여 결과를 생성하는 조인
--Q21. 직원 정보를 추출하되 각 사원의 소속부서에 대한 정보를 함께 추출하시오.
select * from employee  e, department d
where e.dno = d.dno;

--Q22. SCOTT의 부서명을 추출하시오.
select ename, dname
from employee e, department d
where e.dno = d.dno and ename = 'SCOTT';

-- NON-EQUI JOIN: 동일한 컬럼이 없이 다른 조건을 사용하여 조인할 때 사용
select * from tab;
select * from salgrade;

--Q23. 각 직원의 급여가 몇 등급에 해당하는 지를 추출하시오.
select ename, salary, grade
from employee e, salgrade s
where salary between losal and hisal;

--Q24. 직원의 이름, 소속부서명, 급여 등급을 추출하시오.
select ename, dname, grade
from employee e, department d, salgrade s
where e.dno = d.dno and salary between losal and hisal;

--SELF- JOIN: 자기 자신과의 조인을 수행
--Q25. ALLEN의 직속상관의 이름을 추출하시오.
select manager from employee
where ename = 'ALLEN';
select ename from employee
where eno =7698;

select mag.ename
from employee emp, employee mag
where emp.ename='ALLEN' and emp.manager=mag.eno;

--Q26. 직원의 이름과 직속상관의 이름을 추출하시오.
select emp.ename 직원명, mag.ename 직속상관명
from employee emp, employee mag
where emp.manager=mag.eno;

--OUTER-JOIN: 조인 조건에 만족하지 않는 값도 추출함, 끝에 (+) 붙이기
select emp.ename 직원명, mag.ename 직속상관명
from employee emp, employee mag
where emp.manager=mag.eno(+);

-- 서브쿼리(SUB QUERY): 쿼리 안에 또 다른 쿼리를 담아서 표현
-- 하나의 select 구문 내에 포함된 또 다른 select 문장
-- 비교연산자(=, <>, !=, ^=, <, >, <=, >=)의 오른족에 기술해야 하고, 반드시 괄호로 묶어줘야 한다.
-- 메인쿼리가 실행되기 전에 먼저 한번만 실행된다.
-- 단일행 서브쿼리: 서브쿼리의 실행 결과 값이 한 개
-- 다중행 서브쿼리: 서브쿼리의 실행 결과 값이 여러 개

--Q27. SCOTT의 부서명을 추출하시오.
-- equi join 예시
select dname
from employee emp, department dep
where emp.ename='SCOTT' and emp.dno=dep.dno;
-- 서브쿼리 이용
select dname
from department
where dno = (select dno from employee where ename='SCOTT');

--Q28. 직원들의 평균 급여보다 더 적은 급여를 받는 사원의 이름과 급여를 추출하시오.
select ename, salary 
from employee
where salary < (select avg(salary) from employee);

--Q29. SCOTT과 급여가 동일하거나 더 많이 받는 사원의 이름과 급여를 추출하시오.
select ename, salary
from employee
where salary >= (select salary from employee where ename='SCOTT');

--Q30. 부서번호가 
select ename, salary, dname
from employee e, department d
where e.dno=d.dno and e.dno=20 and  e.salary>(select avg(salary) from employee);

-- 다중행 서브쿼리: 서브쿼리의 결과 값이 하나 이상에 해당하는 쿼리
-- 반드시 다중행 연산자와 함께 사용해야 한다.
-- IN: 메인 쿼리의 비교 조건이 서브 쿼리의 결과 중에서 어느 것 하나라도 일치하면 참이되는 연산자
--Q31. 급여가 3000이상인 직원과 동일한 부서에서 근무하는 사원들의 이름, 급여, 부서번호를 추출하시오.
select ename, salary, dno
from employee
where dno in (select dno from employee where salary >= 3000);

--ANY, SOME: 메인 쿼리의 비교 조건이 서브 쿼리의 검색 결과와 하나 이상이 일치하면 참이되는 연산자
--<ANY: 어느 것 하나라도 결과 값보다 작으면 추출함, 최댓값을 반환한다.
-->ANY: 어느 것 하나라도 결과 값보다 크면 추출함, 최솟값을 반환한다.

--Q32. 부서번호가 30번인 사원 중 급여가 가장 작은 사원보다 높은 급여를 받는 사원의 이름과 급여를 추출하시오.
--다중행 서브쿼리
select ename, salary from employee
where salary > any (select salary from employee where dno = 30);
--단일행 서브쿼리
select ename, salary
from employee
where salary > (select min(salary) from employee where dno = 30);


--Q33. 부서번호가 30번인 사원들 중에 급여를 가장 많이 받는 사원보다 더 많은 급여를 받는 사원의 이름과 급여를 추출하시오.
select ename, salary
from employee
where salary > all (select salary from employee where dno = 30);
--단일행 서브쿼리
select ename, salary
from employee
where salary >(select max(salary) from employee where dno=30);














